<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="Leonardo Batista Moreira">
    <meta name="keywords" content="Code Moreira | sustentação de Aplicações | Desenvolvimento de Aplicações | Consultoria de Diagnósticos de TI | E-business & Performance Web | Alocação de Serviços | Outsourcing | Gestão de Projetos | sites | web | desenvolvimento | towards the new | global | system | php | .net | sas | sap | oracle" />
    <meta name="description" content="A Code Moreira é uma startup que tem como criador um aspirante a Empreendedor" />
    <meta name="language" content="pt-br" />
    <meta name="robots" content="all, follow" />

    <!--title-->
    <title>CODE MOREIRA</title>

    <!--CSS-->
    <link href="~/Content/bootstrap.min.css" rel="stylesheet">
    <link href="~/Content/animate.css" rel="stylesheet">
    <link href="~/Content/font-awesome.min.css" rel="stylesheet">
    <link href="~/Content/font.css" rel="stylesheet">
    <link href="~/Content/prettyPhoto.css" rel="stylesheet">
    <link href="~/Content/main.css" rel="stylesheet">
    <link href="~/Content/responsive.css" rel="stylesheet">

    <!--[if lt IE 9]>
        <script src="/scripts/html5shiv.js"></script>
        <script src="/scripts/respond.min.js"></script>
    <![endif]-->
    <link rel="shortcut icon" href="/Content/images/ico/favicon.png">
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/Content/images/ico/apple-touch-icon-144-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/Content/images/ico/apple-touch-icon-114-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/Content/images/ico/apple-touch-icon-72-precomposed.png">
    <link rel="apple-touch-icon-precomposed" href="/Content/images/ico/apple-touch-icon-57-precomposed.png">

    <style>
        .referencia {
            text-decoration: underline;
            color: black;
        }

        .texto-justificado {
            text-align: justify;
        }
    </style>
</head><!--/head-->
<body>

    <div id="service">
        <div class="container text-center">
            <div class="row section-title">
                <div class="col-sm-8 col-sm-offset-2">
                    <h3 class="wow fadeInDown" data-wow-duration="700ms" data-wow-delay="300ms">Blog</h3>
                    <hr class="title-border">
                    <p class="wow fadeInUp" data-wow-duration="700ms" data-wow-delay="300ms">Artigos técnicos sob medida para agregar o máximo de conhecimento possível.</p>
                </div>
            </div>

            @RenderBody()

            @*<h3 class="wow fadeInDown" data-wow-duration="700ms" data-wow-delay="300ms">OOP</h3>
            <hr>

            <div class="row">
                <div class="col-md-12 col-sm-6 wow zoomIn" data-wow-duration="700ms" data-wow-delay="300ms">
                    <div class="service-icon">
                        <img src="/content/images/icones/fabrica.png" />
                    </div>
                    <div class="service-text">
                        <h4>Programação Orientada a Objetos</h4>

                        <div class="texto-justificado">
                            <p>
                                A programação Orientada a objetos (POO) é uma forma especial de programar, mais próximo de como expressaríamos as coisas na vida real do que outros tipos de programação.
                                Com a POO temos que aprender a pensar as coisas de uma maneira distinta, para escrever nossos programas em termos de objetos, propriedades, métodos e outras coisas.
                            </p>
                            <p>Na programação orientada a objetos, implementa-se um conjunto de classes que definem os objetos presentes no sistema de software. Cada classe determina o comportamento (definido nos métodos) e estados possíveis (atributos) de seus objetos, assim como o relacionamento com outros objetos. C++, C♯, VB.NET, Java, Object Pascal, Objective-C, Python, SuperCollider, Ruby e Smalltalk são exemplos de linguagens de programação orientadas a objetos</p>
                            <p> ActionScript, ColdFusion, Javascript, PHP (a partir da versão 4.0), Perl (a partir da versão 5) e Visual Basic (a partir da versão 4) são exemplos de linguagens de programação com suporte a orientação a objetos.</p>
                            <p>Referência: <a href="http://www.criarweb.com/artigos/215.php" target="_blank" class="referencia">Programação Orientada a Objetos</a></p>
                        </div>

                        <h4 class="texto-justificado">
                            Tags: OOP
                            <br />
                            Autor: Leonardo Moreira
                        </h4>
                    </div>
                </div>
                <div class="col-md-12 col-sm-6 wow zoomIn" data-wow-duration="700ms" data-wow-delay="400ms">
                    <div class="service-icon">
                        <img src="/content/images/icones/fabrica.png" />
                    </div>
                    <div class="service-text">
                        <h4>Conceitos Básicos de OOP</h4>
                        <div class="texto-justificado">
                            <h5>Classe</h5>
                            <p>representa um conjunto de objetos com características afins. Uma classe define o comportamento dos objetos através de seus métodos, e quais estados ele é capaz de manter através de seus atributos. Exemplo de classe: Os humanos</p>
                            <h5>Objeto/Instância de uma classe</h5>
                            <p>Um objeto é capaz de armazenar estados através de seus atributos e reagir a mensagens enviadas à ele, assim como se relacionar e enviar mensagens a outros objetos. Exemplo de objetos da classe Humanos: João, José, Maria</p>
                            <h5>Atibutos/Campos</h5>
                            <p>São características de um objeto. Basicamente a estrutura de dados que vai representar a classe. Exemplos: Funcionário: nome, endereço, telefone, CPF,...; Carro: nome, marca, ano, cor, …; Livro: autor, editora, ano. Por sua vez, os atributos possuem valores. Por exemplo, o atributo cor pode conter o valor azul. O conjunto de valores dos atributos de um determinado objeto é chamado de estado</p>
                            <h5>Propriedades</h5>
                            <p>Uma propriedade é um membro que oferece um mecanismo flexível para leitura, gravação ou calcular o valor de um campo particular. Propriedades podem ser usadas como se elas fossem membros de dados públicos, mas são métodos realmente especiais chamados acessadores. Isso permite que os dados sejam acessados facilmente e ainda ajuda a promover a segurança e a flexibilidade dos métodos.</p>
                            <h5>Métodos</h5>
                            <p>É uma ação que um objeto pode fazer.</p>
                            <h5>Construtor</h5>
                            <p>São métodos de classe que são executadas automaticamente quando um objeto é criado. Um construtor pode ser vazio e assim sendo não precisa de implementação na classe ou com algum desenvolvimento para inicialização e este sim deve ser feito. Pode também haver sobrecarga de construtor e esse deve ser indicado na criação do objeto</p>
                            <h5>Destrutor</h5>
                            <p>São utilizados para destruir instâncias de classe. (Veja a parte de Garbage Collector)</p>
                            <h5>Modificadores de acesso</h5>
                            <p>Classes e membros de classes podem especificar qual nível de acesso eles provêm para outras classes</p>
                            <p><b>Public</b> É de acesso publico e todos podem acessar no mesmo assembly ou outro assembly que é referenciado</p>
                            <p><b>Private</b>O tipo ou membro pode ser acessado via código pela mesma classe</p>
                            <p><b>Protected</b>O tipo ou membro pode ser acessado via código pela mesma classe ou em uma classe derivada</p>
                            <p><b>Internal</b>O tipo ou membro pode ser acessado via código pelo mesmo assembly mas não por outro assembly</p>
                            <p><b>Protected Internal</b>O tipo ou membro pode ser acessado via código pelo mesmo assembly ou por alguma outra classe derivada em outro assembly</p>
                            <h5>Interface</h5>
                            <p>É um contrato entre a classe e o mundo externo. Quando uma classe implementa uma interface, ela está comprometida a fornecer o comportamento publicado pela interface</p>
                            <h5>Nasmespace</h5>
                            <p>São referências para organização lógica de classes e interfaces</p>
                            <p>Referência: <a href="https://pt.wikipedia.org/wiki/Orienta%C3%A7%C3%A3o_a_objetos" target="_blank" class="referencia">Conceitos Básicos de OOP</a> </p>
                            <p>Download: <a href="~/Content/Images/blog/ConceitosPOO.pptx" target="_blank" class="referencia">Conceitos POO</a></p>
                        </div>

                        <h4 class="texto-justificado">
                            Tags: OOP
                            <br />
                            Autor: Leonardo Moreira
                        </h4>
                    </div>
                </div>
                <div class="col-md-5 col-sm-6 wow zoomIn" data-wow-duration="700ms" data-wow-delay="300ms">
                    <div class="service-icon">
                        <img src="/content/images/icones/fabrica.png" />
                    </div>
                    <div class="service-text">
                        <h4>Os alicerces da POO</h4>

                        <div class="texto-justificado">
                            <p>
                                Qualquer linguagem orientada a objetos deve oferecer suporte à :
                                <br />- Abstração
                                <br />- Encapsulamento
                                <br />- Herança
                                <br />- Polimorfismo
                                <br />

                                O C# comporta completamente OOP. Falando em um contexto geral, uma linguagem que não suporta qualquer um destes conceitos é desqualificada como uma linguagem orientada a objetos como por exemplo a linguagem C. Sendo estes os alicerces da POO
                            </p>

                        </div>

                        <h4 class="texto-justificado">
                            Tags: OOP
                            <br />
                            Autor: Leonardo Moreira
                        </h4>
                    </div>
                </div>
                <div class="col-md-7 col-sm-6 wow zoomIn" data-wow-duration="700ms" data-wow-delay="400ms">
                    <div class="service-icon">
                        <img src="/content/images/icones/fabrica.png" />
                    </div>
                    <div class="service-text">
                        <h4>Abstração</h4>
                        <div class="texto-justificado">
                            <p>Abstração é um dos pilares da OOP e pode ser definido como a capacidade de representar cenários complexos usando termos simples</p>
                            <p>Pode-se tomar um exemplo da vida real para ilustrar o conceito: um carro é uma abstração de um veículo que um indivíduo pode utilizar com o objetivo de mover-se de um ponto a outro.</p>
                            <p>No dia-a-dia, ninguém dirá: “Vou abrir a porta daquele veículo movido a combustível, entrarei, me sentarei, darei a partida no motor, pisarei na embreagem, engatarei a primeira marcha, acelerarei, controlarei a direção em que o carro irá se mover utilizando o volante”. Tamanha explicação não se faz necessária pois todo o conceito daquilo foi abstraído para algo que conhecemos como "carro". </p>
                            <p>Da mesma forma, imagine a confusão para qualquer pessoa entender a seguinte frase: "Quando abro aquele programa em meu computador, surge uma tela que tem várias caixas retangulares, normalmente brancas, nas quais eu posso clicar dentro e começar a digitar. Algumas dessas caixas já trazem algo escrito, e outras aparecem completamente vazias". Seria muito mais fácil substituir toda esta explicação apenas dizendo "O programa tem uma tela com diversos TextBox". Mais uma vez, o complexo objeto que se parece com uma caixa retangular, e permite ao usuário digitar dentro dela (além de possuir outros atributos e ações), foi sabidamente abstraído para a palavra TextBox</p>
                        </div>
                        <h4 class="texto-justificado">
                            Tags: OOP
                            <br />
                            Autor: Leonardo Moreira
                        </h4>
                    </div>
                </div>
                <div class="col-md-5 col-sm-6 wow zoomIn" data-wow-duration="700ms" data-wow-delay="400ms">
                    <div class="service-icon">
                        <img src="/content/images/icones/fabrica.png" />
                    </div>
                    <div class="service-text">
                        <h4>Encapsulamento</h4>
                        <div class="texto-justificado">
                            <p>Encapsulamento pode ser definido como a tarefa de tornar um objeto o mais auto-suficiente possível que em programação orientada a objetos significa separar o programa em partes, as mais isoladas possíveis</p>
                            <p>Utilizando o exemplo do carro visto no post de Abstração, de maneira intuitiva deixou-se de abordar os detalhes técnicos de como o motor de um carro funciona. Existem tantos detalhes a serem explicados sobre o funcionamento do motor de um carro que a maioria das pessoas provavelmente desistiriam de utilizar um carro caso precisassem entender como funciona cada parte daquilo. Basicamente, uma pessoa não precisa daquele entendimento. Apenas saber que o motor é o dispositivo que propulciona o carro já é o suficiente. A maior parte dos detalhes do motor está “encapsulada” dentro do mesmo, e pessoas utilizando o carro não precisam lidar diretamente com o motor.</p>
                            <p>Exemplo em C#: <a href="http://www.devmedia.com.br/encapsulamento-em-c-csharp-pt-1/10072" target="_blank" class="referencia">Encapsulamento</a> </p>
                        </div>
                        <h4 class="texto-justificado">
                            Tags: OOP
                            <br />
                            Autor: Leonardo Moreira
                        </h4>
                    </div>
                </div>
                <div class="col-md-7 col-sm-6 wow zoomIn" data-wow-duration="700ms" data-wow-delay="400ms">
                    <div class="service-icon">
                        <img src="/content/images/icones/fabrica.png" />
                    </div>
                    <div class="service-text">
                        <h4>Polimorfismo</h4>
                        <div class="texto-justificado">
                            <p>Literalmente, polimorfismo significa “muitas formas” ou “o estado de existir em muitas formas”. No mundo da programação, polimorfismo é muitas vezes definido como a “capacidade de objetos diferentes possuirem métodos de mesmo nome e mesma lista de parâmetros que quando chamados executam tarefas de maneiras diferentes”.</p>
                            <p>Usando o conceito de polimorfismo podemos ter objetos diferentes que possuam algum método de mesmo nome e assinatura, e chamar estes métodos de modo genérico</p>
                            <p>Seguindo com o exemplo do carro, pode-se dizer que carro “é-um” veículo. Pode-se também dizer que moto “é-um” veículo, e o mesmo vale para bicicleta. Todo veículo possui algum meio para acelerar, não importa qual mecanismo é usado para isso, e o mecanismo geralmente é diferente, principalmente se comparado um carro (que usa um motor) à uma bicicleta (que usa pedais, corrente e coroa). Colocado em outras palavras, temos objetos diferentes (carro, moto, bicicleta), que derivam de uma mesma classe (veículo). Esta classe possui um método Acelerar, e deste modo, podemos utilizar os diferentes objetos de modo polimórfico, invocando um método de mesmo nome, mas que possui implementação e comportamento diferente em cada um dos objetos.</p>
                            <p>Referência: <a href="https://msdn.microsoft.com/pt-br/library/cc580626.aspx" target="_blank" class="referencia">Herança</a> </p>
                        </div>
                        <h4 class="texto-justificado">
                            Tags: OOP
                            <br />
                            Autor: Leonardo Moreira
                        </h4>
                    </div>
                </div>
                <div class="col-md-12 col-sm-6 wow zoomIn" data-wow-duration="700ms" data-wow-delay="400ms">
                    <div class="service-icon">
                        <img src="/content/images/icones/fabrica.png" />
                    </div>
                    <div class="service-text">
                        <h4>Herança</h4>
                        <div class="texto-justificado">
                            <p>Herança pode ser definida como a capacidade de uma classe herdar atributos e comportamento de uma outra classe</p>
                            <p>Basta um passeio ao redor da cidade para descobrir-se que existem vários tipos e modelos de carros lá fora. Carros de passeio, carros de corrida, carros conversíveis, carros com volante do lado esquerdo e outros do lado direito, carros de diferentes cores, fabricantes, etc. Cada vez que um novo carro é criado, não é necessário “reinventar a roda”, e começar todo um projeto novamente. Diversos conceitos abstraídos e encapsulados no objeto carro já foram planejados, testados e aprovados, e por isso não faz sentido gastar-se tempo e recursos para fazer tudo aquilo de novo. Todo carro terá um meio de propulsão, direção, acelerador e freio, rodas e pneus, e deste modo, todo novo carro pode herdar estas características e funcionamento de um projeto já existente. Caso seja necessário criar um novo carro que seja quase igual a todos os outros, mas que possua algumas coisas diferentes (por exemplo, utilizando um câmbio automático ao invés de manual), o projetista pode herdar o novo carro a partir do projeto básico, e então adicionar as características específicas do novo carro ao novo projeto.</p>
                            <p>Abaixo segue um exemplo de Herança:</p>
                            <center><img src="~/Content/Images/blog/ExemploHeranca.gif" class="img-responsive" /></center>
                            <p>Existem alguns termos utilizados frequentemente, e o leitor precisa estar familiarizado com eles. Chama-se subclasse a classe criada derivada de uma outra classe, a qual por sua vez é chamada superclasse, ou classe-base. Diz-se também que a subclasse é uma especialização de sua superclasse, ou então que a superclasse é uma generalização de suas subclasses.</p>
                            <p>A Figura acima mostra uma representação gráfica destes termos. A seta preta que conecta a classe Homem (SubClasse) à classe Humano (SuperClasse) indica que Homem é-um Humano. A verde indica que a classe Homem é uma especialização da classe Humano, e a seta azul indica que a classe Humano é uma generalização da classe Homem.</p>
                            <p>Além disso, a herança é definida com um relacionamento “é-um” (ou é-uma). Por exemplo, pode-se dizer que o homem é-um ser-humano, ou que um calhambeque é-um carro</p>
                            <p>Referência: <a href="https://msdn.microsoft.com/pt-br/library/cc580626.aspx" target="_blank" class="referencia">Herança</a> </p>
                        </div>
                        <h4 class="texto-justificado">
                            Tags: OOP
                            <br />
                            Autor: Leonardo Moreira
                        </h4>
                    </div>
                </div>
            </div>

            <h3 class="wow fadeInDown padding-top" data-wow-duration="700ms" data-wow-delay="300ms">.NET, C#, MVC</h3>
            <hr>*@

        </div>
    </div>
    <p>&nbsp;</p>
    <p class="text-center">
        <a href="javascript:history.back();" style="color: rgba(53, 46, 101, 1)">Voltar</a>
    </p>
    <p>&nbsp;</p>
    <footer id="footer">
        <div class="container text-center wow zoomIn" data-wow-duration="700ms" data-wow-delay="300ms">
            <p>&copy; @DateTime.Now.Year <a href="#">Code Moreira</a> All rights reserved.</p>
        </div>
        @*<a data-scroll href="#navigation" class="to-top"></a>*@
    </footer><!--/#footer-->
    <!--/#scripts-->
    <script type="text/javascript" src="~/Scripts/jquery.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.prettyPhoto.js"></script>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
    <script type="text/javascript" src="~/Scripts/gmaps.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.parallax.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.isotope.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.easypiechart.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.appear.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.inview.min.js"></script>
    <script type="text/javascript" src="~/Scripts/wow.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.countTo.js"></script>
    <script type="text/javascript" src="~/Scripts/smooth-scroll.js"></script>
    <script type="text/javascript" src="~/Scripts/canvas.js"></script>
    <script type="text/javascript" src="~/Scripts/preloader.js"></script>
    <script type="text/javascript" src="~/Scripts/main.js"></script>
    <script type="text/javascript" src="~/Scripts/sendMail.js"></script>
</body>
</html>